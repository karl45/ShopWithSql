CREATE DATABASE DB

CREATE TABLE [DB].[DBO].[DEVELOPER]
(
	DEVELOPER_ID INT PRIMARY KEY Identity(1,1),
	DEVELOPER_NAME VARCHAR(200) NOT NULL,
	DEVELOPER_LANGUAGE VARCHAR(50) NOT NULL,
)


CREATE TABLE [DB].[DBO].[BACKLOG_PRODUCT]
(
	BACKLOG_PRODUCT_ID INT PRIMARY KEY Identity(1,1),
	BACKLOG_DESCRIPTION VARCHAR(200), 
	BACKLOG_QUEUE_COUNT INT,
	DEVELOPER_ID INT
)

CREATE TABLE [DB].[DBO].[BIDS]
(
	BIDS_ID INT PRIMARY KEY IDENTITY(1,1),
	BIDS_NAME VARCHAR(100) NOT NULL,
	BIDS_COUNT_TIME INT NOT NULL,
	BIDS_TYPE_ID INT NOT NULL,
	BACKLOG_PRODUCT_ID INT NOT NULL
)
CREATE TABLE [DB].[DBO].[BIDS_TYPE]
(
	BIDS_TYPE_ID INT PRIMARY KEY IDENTITY(1,1),
	BIDS_TYPE_NAME VARCHAR(150) NOT NULL
)

ALTER TABLE [DB].[DBO].[BACKLOG_PRODUCT]
	ADD FOREIGN KEY(DEVELOPER_ID) 
		REFERENCES[DB].[DBO].[DEVELOPER](DEVELOPER_ID)

		
ALTER TABLE [DB].[DBO].[BIDS]
	ADD FOREIGN KEY(BACKLOG_PRODUCT_ID) 
		REFERENCES [DB].[DBO].[BACKLOG_PRODUCT](BACKLOG_PRODUCT_ID)

ALTER TABLE [DB].[DBO].[BIDS]
	ADD FOREIGN KEY(BIDS_TYPE_ID) 
		REFERENCES [DB].[DBO].[BIDS_TYPE](BIDS_TYPE_ID)

insert into DEVELOPER(DEVELOPER_LANGUAGE,DEVELOPER_NAME)
values('c++','dev_1'),
('java','dev_2')

insert into BACKLOG_PRODUCT(BACKLOG_DESCRIPTION,BACKLOG_QUEUE_COUNT,DEVELOPER_ID)
values('hard scrolling',32,1),
('slow loading',47,1),
('be causes',58,2)

insert into BIDS_TYPE(BIDS_TYPE_NAME)
values('neccessary'),
('closed')

insert into BIDS(BIDS_NAME,BIDS_COUNT_TIME,BIDS_TYPE_ID,BACKLOG_PRODUCT_ID)
values
('need healing',4,1,2),
('should to be fixed',10,2,1),
('start to check front',2,2,1),
('wait to fix another task',6,1,1),
('task complete',8,2,1)


select b.BIDS_ID,b.BIDS_NAME,d.DEVELOPER_NAME 
from BIDS b
join BACKLOG_PRODUCT bp on bp.BACKLOG_PRODUCT_ID = b.BACKLOG_PRODUCT_ID
join DEVELOPER d on d.DEVELOPER_ID = bp.BACKLOG_PRODUCT_ID
where DEVELOPER_NAME = 'dev_2'


select * from BACKLOG_PRODUCT bp
join DEVELOPER d on bp.DEVELOPER_ID = d.DEVELOPER_ID
where DEVELOPER_NAME = 'dev_1'

select 
BIDS_NAME,BIDS_COUNT_TIME,BIDS_TYPE_ID,
count(BIDS_name) over(partition by Bids_type_id) count_bids
from BIDS 
--group by BIDS_TYPE_ID